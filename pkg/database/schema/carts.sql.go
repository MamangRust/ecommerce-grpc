// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: carts.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createCart = `-- name: CreateCart :one
INSERT INTO "carts" ("user_id", "product_id", "name", "price", "image", "quantity", "weight")
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING cart_id, user_id, product_id, name, price, image, quantity, weight, created_at, updated_at, deleted_at
`

type CreateCartParams struct {
	UserID    int32  `json:"user_id"`
	ProductID int32  `json:"product_id"`
	Name      string `json:"name"`
	Price     int32  `json:"price"`
	Image     string `json:"image"`
	Quantity  int32  `json:"quantity"`
	Weight    int32  `json:"weight"`
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (*Cart, error) {
	row := q.db.QueryRowContext(ctx, createCart,
		arg.UserID,
		arg.ProductID,
		arg.Name,
		arg.Price,
		arg.Image,
		arg.Quantity,
		arg.Weight,
	)
	var i Cart
	err := row.Scan(
		&i.CartID,
		&i.UserID,
		&i.ProductID,
		&i.Name,
		&i.Price,
		&i.Image,
		&i.Quantity,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const deleteAllCart = `-- name: DeleteAllCart :exec
DELETE FROM "carts" WHERE "cart_id" = ANY($1::int[])
`

func (q *Queries) DeleteAllCart(ctx context.Context, dollar_1 []int32) error {
	_, err := q.db.ExecContext(ctx, deleteAllCart, pq.Array(dollar_1))
	return err
}

const deleteCart = `-- name: DeleteCart :exec
DELETE FROM "carts" WHERE "cart_id" = $1
`

func (q *Queries) DeleteCart(ctx context.Context, cartID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCart, cartID)
	return err
}

const getCarts = `-- name: GetCarts :many
SELECT
    cart_id, user_id, product_id, name, price, image, quantity, weight, created_at, updated_at, deleted_at,
    COUNT(*) OVER() AS total_count
FROM carts
WHERE deleted_at IS NULL
AND user_id = $1
AND ($2::TEXT IS NULL OR name ILIKE '%' || $2 || '%' OR price ILIKE '%' || $2 || '%')
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type GetCartsParams struct {
	UserID  int32  `json:"user_id"`
	Column2 string `json:"column_2"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetCartsRow struct {
	CartID     int32        `json:"cart_id"`
	UserID     int32        `json:"user_id"`
	ProductID  int32        `json:"product_id"`
	Name       string       `json:"name"`
	Price      int32        `json:"price"`
	Image      string       `json:"image"`
	Quantity   int32        `json:"quantity"`
	Weight     int32        `json:"weight"`
	CreatedAt  sql.NullTime `json:"created_at"`
	UpdatedAt  sql.NullTime `json:"updated_at"`
	DeletedAt  sql.NullTime `json:"deleted_at"`
	TotalCount int64        `json:"total_count"`
}

func (q *Queries) GetCarts(ctx context.Context, arg GetCartsParams) ([]*GetCartsRow, error) {
	rows, err := q.db.QueryContext(ctx, getCarts,
		arg.UserID,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetCartsRow
	for rows.Next() {
		var i GetCartsRow
		if err := rows.Scan(
			&i.CartID,
			&i.UserID,
			&i.ProductID,
			&i.Name,
			&i.Price,
			&i.Image,
			&i.Quantity,
			&i.Weight,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
