// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: shipping_address.sql

package db

import (
	"context"
	"database/sql"
)

const createShippingAddress = `-- name: CreateShippingAddress :one
INSERT INTO shipping_addresses (
    order_id, alamat, provinsi, negara, kota, courier, shipping_method, shipping_cost
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING shipping_address_id, order_id, alamat, provinsi, negara, kota, courier, shipping_method, shipping_cost, created_at, updated_at, deleted_at
`

type CreateShippingAddressParams struct {
	OrderID        int32   `json:"order_id"`
	Alamat         string  `json:"alamat"`
	Provinsi       string  `json:"provinsi"`
	Negara         string  `json:"negara"`
	Kota           string  `json:"kota"`
	Courier        string  `json:"courier"`
	ShippingMethod string  `json:"shipping_method"`
	ShippingCost   float64 `json:"shipping_cost"`
}

func (q *Queries) CreateShippingAddress(ctx context.Context, arg CreateShippingAddressParams) (*ShippingAddress, error) {
	row := q.db.QueryRowContext(ctx, createShippingAddress,
		arg.OrderID,
		arg.Alamat,
		arg.Provinsi,
		arg.Negara,
		arg.Kota,
		arg.Courier,
		arg.ShippingMethod,
		arg.ShippingCost,
	)
	var i ShippingAddress
	err := row.Scan(
		&i.ShippingAddressID,
		&i.OrderID,
		&i.Alamat,
		&i.Provinsi,
		&i.Negara,
		&i.Kota,
		&i.Courier,
		&i.ShippingMethod,
		&i.ShippingCost,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const deleteAllPermanentShippingAddress = `-- name: DeleteAllPermanentShippingAddress :exec
DELETE FROM shipping_addresses
WHERE deleted_at IS NOT NULL
`

func (q *Queries) DeleteAllPermanentShippingAddress(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllPermanentShippingAddress)
	return err
}

const deleteShippingAddressPermanently = `-- name: DeleteShippingAddressPermanently :exec
DELETE FROM shipping_addresses WHERE shipping_address_id = $1 AND deleted_at IS NOT NULL
`

func (q *Queries) DeleteShippingAddressPermanently(ctx context.Context, shippingAddressID int32) error {
	_, err := q.db.ExecContext(ctx, deleteShippingAddressPermanently, shippingAddressID)
	return err
}

const getShippingAddress = `-- name: GetShippingAddress :many
SELECT
    shipping_address_id, order_id, alamat, provinsi, negara, kota, courier, shipping_method, shipping_cost, created_at, updated_at, deleted_at,
    COUNT(*) OVER() AS total_count
FROM shipping_addresses
WHERE deleted_at IS NULL
AND ($1::TEXT IS NULL OR shipping_address_id::TEXT ILIKE '%' || $1 || '%' OR alamat ILIKE '%' || $1 || '%')
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetShippingAddressParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetShippingAddressRow struct {
	ShippingAddressID int32        `json:"shipping_address_id"`
	OrderID           int32        `json:"order_id"`
	Alamat            string       `json:"alamat"`
	Provinsi          string       `json:"provinsi"`
	Negara            string       `json:"negara"`
	Kota              string       `json:"kota"`
	Courier           string       `json:"courier"`
	ShippingMethod    string       `json:"shipping_method"`
	ShippingCost      float64      `json:"shipping_cost"`
	CreatedAt         sql.NullTime `json:"created_at"`
	UpdatedAt         sql.NullTime `json:"updated_at"`
	DeletedAt         sql.NullTime `json:"deleted_at"`
	TotalCount        int64        `json:"total_count"`
}

func (q *Queries) GetShippingAddress(ctx context.Context, arg GetShippingAddressParams) ([]*GetShippingAddressRow, error) {
	rows, err := q.db.QueryContext(ctx, getShippingAddress, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetShippingAddressRow
	for rows.Next() {
		var i GetShippingAddressRow
		if err := rows.Scan(
			&i.ShippingAddressID,
			&i.OrderID,
			&i.Alamat,
			&i.Provinsi,
			&i.Negara,
			&i.Kota,
			&i.Courier,
			&i.ShippingMethod,
			&i.ShippingCost,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShippingAddressActive = `-- name: GetShippingAddressActive :many
SELECT
    shipping_address_id, order_id, alamat, provinsi, negara, kota, courier, shipping_method, shipping_cost, created_at, updated_at, deleted_at,
    COUNT(*) OVER() AS total_count
FROM shipping_addresses
WHERE deleted_at IS NULL
AND ($1::TEXT IS NULL OR shipping_address_id::TEXT ILIKE '%' || $1 || '%' OR alamat ILIKE '%' || $1 || '%')
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetShippingAddressActiveParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetShippingAddressActiveRow struct {
	ShippingAddressID int32        `json:"shipping_address_id"`
	OrderID           int32        `json:"order_id"`
	Alamat            string       `json:"alamat"`
	Provinsi          string       `json:"provinsi"`
	Negara            string       `json:"negara"`
	Kota              string       `json:"kota"`
	Courier           string       `json:"courier"`
	ShippingMethod    string       `json:"shipping_method"`
	ShippingCost      float64      `json:"shipping_cost"`
	CreatedAt         sql.NullTime `json:"created_at"`
	UpdatedAt         sql.NullTime `json:"updated_at"`
	DeletedAt         sql.NullTime `json:"deleted_at"`
	TotalCount        int64        `json:"total_count"`
}

func (q *Queries) GetShippingAddressActive(ctx context.Context, arg GetShippingAddressActiveParams) ([]*GetShippingAddressActiveRow, error) {
	rows, err := q.db.QueryContext(ctx, getShippingAddressActive, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetShippingAddressActiveRow
	for rows.Next() {
		var i GetShippingAddressActiveRow
		if err := rows.Scan(
			&i.ShippingAddressID,
			&i.OrderID,
			&i.Alamat,
			&i.Provinsi,
			&i.Negara,
			&i.Kota,
			&i.Courier,
			&i.ShippingMethod,
			&i.ShippingCost,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShippingAddressByOrderID = `-- name: GetShippingAddressByOrderID :one
SELECT shipping_address_id, order_id, alamat, provinsi, negara, kota, courier, shipping_method, shipping_cost, created_at, updated_at, deleted_at
FROM shipping_addresses
WHERE order_id = $1
AND deleted_at IS NULL
`

func (q *Queries) GetShippingAddressByOrderID(ctx context.Context, orderID int32) (*ShippingAddress, error) {
	row := q.db.QueryRowContext(ctx, getShippingAddressByOrderID, orderID)
	var i ShippingAddress
	err := row.Scan(
		&i.ShippingAddressID,
		&i.OrderID,
		&i.Alamat,
		&i.Provinsi,
		&i.Negara,
		&i.Kota,
		&i.Courier,
		&i.ShippingMethod,
		&i.ShippingCost,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getShippingAddressTrashed = `-- name: GetShippingAddressTrashed :many
SELECT
    shipping_address_id, order_id, alamat, provinsi, negara, kota, courier, shipping_method, shipping_cost, created_at, updated_at, deleted_at,
    COUNT(*) OVER() AS total_count
FROM shipping_addresses
WHERE deleted_at IS NOT NULL
AND ($1::TEXT IS NULL OR shipping_address_id::TEXT ILIKE '%' || $1 || '%' OR alamat ILIKE '%' || $1 || '%')
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetShippingAddressTrashedParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetShippingAddressTrashedRow struct {
	ShippingAddressID int32        `json:"shipping_address_id"`
	OrderID           int32        `json:"order_id"`
	Alamat            string       `json:"alamat"`
	Provinsi          string       `json:"provinsi"`
	Negara            string       `json:"negara"`
	Kota              string       `json:"kota"`
	Courier           string       `json:"courier"`
	ShippingMethod    string       `json:"shipping_method"`
	ShippingCost      float64      `json:"shipping_cost"`
	CreatedAt         sql.NullTime `json:"created_at"`
	UpdatedAt         sql.NullTime `json:"updated_at"`
	DeletedAt         sql.NullTime `json:"deleted_at"`
	TotalCount        int64        `json:"total_count"`
}

func (q *Queries) GetShippingAddressTrashed(ctx context.Context, arg GetShippingAddressTrashedParams) ([]*GetShippingAddressTrashedRow, error) {
	rows, err := q.db.QueryContext(ctx, getShippingAddressTrashed, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetShippingAddressTrashedRow
	for rows.Next() {
		var i GetShippingAddressTrashedRow
		if err := rows.Scan(
			&i.ShippingAddressID,
			&i.OrderID,
			&i.Alamat,
			&i.Provinsi,
			&i.Negara,
			&i.Kota,
			&i.Courier,
			&i.ShippingMethod,
			&i.ShippingCost,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShippingByID = `-- name: GetShippingByID :one
SELECT shipping_address_id, order_id, alamat, provinsi, negara, kota, courier, shipping_method, shipping_cost, created_at, updated_at, deleted_at
FROM shipping_addresses
WHERE shipping_address_id = $1
AND deleted_at IS NULL
`

func (q *Queries) GetShippingByID(ctx context.Context, shippingAddressID int32) (*ShippingAddress, error) {
	row := q.db.QueryRowContext(ctx, getShippingByID, shippingAddressID)
	var i ShippingAddress
	err := row.Scan(
		&i.ShippingAddressID,
		&i.OrderID,
		&i.Alamat,
		&i.Provinsi,
		&i.Negara,
		&i.Kota,
		&i.Courier,
		&i.ShippingMethod,
		&i.ShippingCost,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const restoreAllShippingAddress = `-- name: RestoreAllShippingAddress :exec
UPDATE shipping_addresses
SET deleted_at = NULL
WHERE deleted_at IS NOT NULL
`

func (q *Queries) RestoreAllShippingAddress(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, restoreAllShippingAddress)
	return err
}

const restoreShippingAddress = `-- name: RestoreShippingAddress :one
UPDATE shipping_addresses
SET deleted_at = NULL
WHERE shipping_address_id = $1
AND deleted_at IS NOT NULL
RETURNING shipping_address_id, order_id, alamat, provinsi, negara, kota, courier, shipping_method, shipping_cost, created_at, updated_at, deleted_at
`

func (q *Queries) RestoreShippingAddress(ctx context.Context, shippingAddressID int32) (*ShippingAddress, error) {
	row := q.db.QueryRowContext(ctx, restoreShippingAddress, shippingAddressID)
	var i ShippingAddress
	err := row.Scan(
		&i.ShippingAddressID,
		&i.OrderID,
		&i.Alamat,
		&i.Provinsi,
		&i.Negara,
		&i.Kota,
		&i.Courier,
		&i.ShippingMethod,
		&i.ShippingCost,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const trashShippingAddress = `-- name: TrashShippingAddress :one
UPDATE shipping_addresses
SET deleted_at = CURRENT_TIMESTAMP
WHERE shipping_address_id = $1
AND deleted_at IS NULL
RETURNING shipping_address_id, order_id, alamat, provinsi, negara, kota, courier, shipping_method, shipping_cost, created_at, updated_at, deleted_at
`

func (q *Queries) TrashShippingAddress(ctx context.Context, shippingAddressID int32) (*ShippingAddress, error) {
	row := q.db.QueryRowContext(ctx, trashShippingAddress, shippingAddressID)
	var i ShippingAddress
	err := row.Scan(
		&i.ShippingAddressID,
		&i.OrderID,
		&i.Alamat,
		&i.Provinsi,
		&i.Negara,
		&i.Kota,
		&i.Courier,
		&i.ShippingMethod,
		&i.ShippingCost,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const updateShippingAddress = `-- name: UpdateShippingAddress :one
UPDATE shipping_addresses
SET 
    alamat = $2,
    provinsi = $3,
    negara = $4,
    kota = $5,
    courier = $6,
    shipping_method = $7,
    shipping_cost = $8,
    updated_at = CURRENT_TIMESTAMP
WHERE shipping_address_id = $1
AND deleted_at IS NULL
RETURNING shipping_address_id, order_id, alamat, provinsi, negara, kota, courier, shipping_method, shipping_cost, created_at, updated_at, deleted_at
`

type UpdateShippingAddressParams struct {
	ShippingAddressID int32   `json:"shipping_address_id"`
	Alamat            string  `json:"alamat"`
	Provinsi          string  `json:"provinsi"`
	Negara            string  `json:"negara"`
	Kota              string  `json:"kota"`
	Courier           string  `json:"courier"`
	ShippingMethod    string  `json:"shipping_method"`
	ShippingCost      float64 `json:"shipping_cost"`
}

func (q *Queries) UpdateShippingAddress(ctx context.Context, arg UpdateShippingAddressParams) (*ShippingAddress, error) {
	row := q.db.QueryRowContext(ctx, updateShippingAddress,
		arg.ShippingAddressID,
		arg.Alamat,
		arg.Provinsi,
		arg.Negara,
		arg.Kota,
		arg.Courier,
		arg.ShippingMethod,
		arg.ShippingCost,
	)
	var i ShippingAddress
	err := row.Scan(
		&i.ShippingAddressID,
		&i.OrderID,
		&i.Alamat,
		&i.Provinsi,
		&i.Negara,
		&i.Kota,
		&i.Courier,
		&i.ShippingMethod,
		&i.ShippingCost,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
