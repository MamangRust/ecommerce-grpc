// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reviews.sql

package db

import (
	"context"
	"database/sql"
)

const createReview = `-- name: CreateReview :one
INSERT INTO reviews (
    user_id, product_id, name, comment, rating
) VALUES ($1, $2, $3, $4, $5)
RETURNING review_id, user_id, product_id, name, comment, rating, created_at, updated_at, deleted_at
`

type CreateReviewParams struct {
	UserID    int32  `json:"user_id"`
	ProductID int32  `json:"product_id"`
	Name      string `json:"name"`
	Comment   string `json:"comment"`
	Rating    int32  `json:"rating"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (*Review, error) {
	row := q.db.QueryRowContext(ctx, createReview,
		arg.UserID,
		arg.ProductID,
		arg.Name,
		arg.Comment,
		arg.Rating,
	)
	var i Review
	err := row.Scan(
		&i.ReviewID,
		&i.UserID,
		&i.ProductID,
		&i.Name,
		&i.Comment,
		&i.Rating,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const deleteAllPermanentReviews = `-- name: DeleteAllPermanentReviews :exec
DELETE FROM reviews
WHERE deleted_at IS NOT NULL
`

func (q *Queries) DeleteAllPermanentReviews(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllPermanentReviews)
	return err
}

const deleteReviewPermanently = `-- name: DeleteReviewPermanently :exec
DELETE FROM reviews WHERE review_id = $1 AND deleted_at IS NOT NULL
`

func (q *Queries) DeleteReviewPermanently(ctx context.Context, reviewID int32) error {
	_, err := q.db.ExecContext(ctx, deleteReviewPermanently, reviewID)
	return err
}

const getReviewByID = `-- name: GetReviewByID :one
SELECT review_id, user_id, product_id, name, comment, rating, created_at, updated_at, deleted_at
FROM reviews
WHERE review_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetReviewByID(ctx context.Context, reviewID int32) (*Review, error) {
	row := q.db.QueryRowContext(ctx, getReviewByID, reviewID)
	var i Review
	err := row.Scan(
		&i.ReviewID,
		&i.UserID,
		&i.ProductID,
		&i.Name,
		&i.Comment,
		&i.Rating,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getReviews = `-- name: GetReviews :many
SELECT
    review_id, user_id, product_id, name, comment, rating, created_at, updated_at, deleted_at,
    COUNT(*) OVER() AS total_count
FROM reviews
WHERE deleted_at IS NULL
AND ($1::TEXT IS NULL OR review_id::TEXT ILIKE '%' || $1 || '%' OR name ILIKE '%' || $1 || '%')
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetReviewsParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetReviewsRow struct {
	ReviewID   int32        `json:"review_id"`
	UserID     int32        `json:"user_id"`
	ProductID  int32        `json:"product_id"`
	Name       string       `json:"name"`
	Comment    string       `json:"comment"`
	Rating     int32        `json:"rating"`
	CreatedAt  sql.NullTime `json:"created_at"`
	UpdatedAt  sql.NullTime `json:"updated_at"`
	DeletedAt  sql.NullTime `json:"deleted_at"`
	TotalCount int64        `json:"total_count"`
}

func (q *Queries) GetReviews(ctx context.Context, arg GetReviewsParams) ([]*GetReviewsRow, error) {
	rows, err := q.db.QueryContext(ctx, getReviews, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetReviewsRow
	for rows.Next() {
		var i GetReviewsRow
		if err := rows.Scan(
			&i.ReviewID,
			&i.UserID,
			&i.ProductID,
			&i.Name,
			&i.Comment,
			&i.Rating,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReviewsActive = `-- name: GetReviewsActive :many
SELECT
    review_id, user_id, product_id, name, comment, rating, created_at, updated_at, deleted_at,
    COUNT(*) OVER() AS total_count
FROM reviews
WHERE deleted_at IS NULL
AND ($1::TEXT IS NULL OR review_id::TEXT ILIKE '%' || $1 || '%' OR name ILIKE '%' || $1 || '%')
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetReviewsActiveParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetReviewsActiveRow struct {
	ReviewID   int32        `json:"review_id"`
	UserID     int32        `json:"user_id"`
	ProductID  int32        `json:"product_id"`
	Name       string       `json:"name"`
	Comment    string       `json:"comment"`
	Rating     int32        `json:"rating"`
	CreatedAt  sql.NullTime `json:"created_at"`
	UpdatedAt  sql.NullTime `json:"updated_at"`
	DeletedAt  sql.NullTime `json:"deleted_at"`
	TotalCount int64        `json:"total_count"`
}

func (q *Queries) GetReviewsActive(ctx context.Context, arg GetReviewsActiveParams) ([]*GetReviewsActiveRow, error) {
	rows, err := q.db.QueryContext(ctx, getReviewsActive, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetReviewsActiveRow
	for rows.Next() {
		var i GetReviewsActiveRow
		if err := rows.Scan(
			&i.ReviewID,
			&i.UserID,
			&i.ProductID,
			&i.Name,
			&i.Comment,
			&i.Rating,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReviewsByProductID = `-- name: GetReviewsByProductID :many
SELECT
    review_id, user_id, product_id, name, comment, rating, created_at, updated_at, deleted_at,
    COUNT(*) OVER() AS total_count
FROM reviews
WHERE deleted_at IS NULL
AND product_id = $1
AND ($2::TEXT IS NULL OR review_id::TEXT ILIKE '%' || $1 || '%' OR name ILIKE '%' || $1 || '%')
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type GetReviewsByProductIDParams struct {
	ProductID int32  `json:"product_id"`
	Column2   string `json:"column_2"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

type GetReviewsByProductIDRow struct {
	ReviewID   int32        `json:"review_id"`
	UserID     int32        `json:"user_id"`
	ProductID  int32        `json:"product_id"`
	Name       string       `json:"name"`
	Comment    string       `json:"comment"`
	Rating     int32        `json:"rating"`
	CreatedAt  sql.NullTime `json:"created_at"`
	UpdatedAt  sql.NullTime `json:"updated_at"`
	DeletedAt  sql.NullTime `json:"deleted_at"`
	TotalCount int64        `json:"total_count"`
}

func (q *Queries) GetReviewsByProductID(ctx context.Context, arg GetReviewsByProductIDParams) ([]*GetReviewsByProductIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getReviewsByProductID,
		arg.ProductID,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetReviewsByProductIDRow
	for rows.Next() {
		var i GetReviewsByProductIDRow
		if err := rows.Scan(
			&i.ReviewID,
			&i.UserID,
			&i.ProductID,
			&i.Name,
			&i.Comment,
			&i.Rating,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReviewsTrashed = `-- name: GetReviewsTrashed :many
SELECT
    review_id, user_id, product_id, name, comment, rating, created_at, updated_at, deleted_at,
    COUNT(*) OVER() AS total_count
FROM reviews
WHERE deleted_at IS NOT NULL
AND ($1::TEXT IS NULL OR review_id::TEXT ILIKE '%' || $1 || '%' OR name ILIKE '%' || $1 || '%')
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetReviewsTrashedParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetReviewsTrashedRow struct {
	ReviewID   int32        `json:"review_id"`
	UserID     int32        `json:"user_id"`
	ProductID  int32        `json:"product_id"`
	Name       string       `json:"name"`
	Comment    string       `json:"comment"`
	Rating     int32        `json:"rating"`
	CreatedAt  sql.NullTime `json:"created_at"`
	UpdatedAt  sql.NullTime `json:"updated_at"`
	DeletedAt  sql.NullTime `json:"deleted_at"`
	TotalCount int64        `json:"total_count"`
}

func (q *Queries) GetReviewsTrashed(ctx context.Context, arg GetReviewsTrashedParams) ([]*GetReviewsTrashedRow, error) {
	rows, err := q.db.QueryContext(ctx, getReviewsTrashed, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetReviewsTrashedRow
	for rows.Next() {
		var i GetReviewsTrashedRow
		if err := rows.Scan(
			&i.ReviewID,
			&i.UserID,
			&i.ProductID,
			&i.Name,
			&i.Comment,
			&i.Rating,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreAllReviews = `-- name: RestoreAllReviews :exec
UPDATE reviews
SET deleted_at = NULL
WHERE deleted_at IS NOT NULL
`

func (q *Queries) RestoreAllReviews(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, restoreAllReviews)
	return err
}

const restoreReview = `-- name: RestoreReview :one
UPDATE reviews
SET deleted_at = NULL
WHERE review_id = $1
AND deleted_at IS NOT NULL
RETURNING review_id, user_id, product_id, name, comment, rating, created_at, updated_at, deleted_at
`

func (q *Queries) RestoreReview(ctx context.Context, reviewID int32) (*Review, error) {
	row := q.db.QueryRowContext(ctx, restoreReview, reviewID)
	var i Review
	err := row.Scan(
		&i.ReviewID,
		&i.UserID,
		&i.ProductID,
		&i.Name,
		&i.Comment,
		&i.Rating,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const trashReview = `-- name: TrashReview :one
UPDATE reviews
SET deleted_at = CURRENT_TIMESTAMP
WHERE review_id = $1
AND deleted_at IS NULL
RETURNING review_id, user_id, product_id, name, comment, rating, created_at, updated_at, deleted_at
`

func (q *Queries) TrashReview(ctx context.Context, reviewID int32) (*Review, error) {
	row := q.db.QueryRowContext(ctx, trashReview, reviewID)
	var i Review
	err := row.Scan(
		&i.ReviewID,
		&i.UserID,
		&i.ProductID,
		&i.Name,
		&i.Comment,
		&i.Rating,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const updateReview = `-- name: UpdateReview :one
UPDATE reviews
SET 
    name = $2,
    comment = $3,
    rating = $4,
    updated_at = CURRENT_TIMESTAMP
WHERE review_id = $1
AND deleted_at IS NULL
RETURNING review_id, user_id, product_id, name, comment, rating, created_at, updated_at, deleted_at
`

type UpdateReviewParams struct {
	ReviewID int32  `json:"review_id"`
	Name     string `json:"name"`
	Comment  string `json:"comment"`
	Rating   int32  `json:"rating"`
}

func (q *Queries) UpdateReview(ctx context.Context, arg UpdateReviewParams) (*Review, error) {
	row := q.db.QueryRowContext(ctx, updateReview,
		arg.ReviewID,
		arg.Name,
		arg.Comment,
		arg.Rating,
	)
	var i Review
	err := row.Scan(
		&i.ReviewID,
		&i.UserID,
		&i.ProductID,
		&i.Name,
		&i.Comment,
		&i.Rating,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
